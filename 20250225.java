Javaの割り算演算子

1. 整数同士の割り算
特徴:整数同士の割り算の結果は、小数点以下が切り捨てられた整数になります。
　　 例えば、5 / 2 の結果は 2 になります。
注意点:小数点以下の結果が必要な場合は、どちらかの数値を浮動小数点数に変換する必要があります。
      整数を0で割ると、ArithmeticExceptionという例外が発生し、プログラムが停止します。

2. 浮動小数点数同士の割り算
特徴:浮動小数点数同士の割り算の結果は、小数点以下を含む浮動小数点数になります。
        5.0 / 2.0 の結果は 2.5 になります。
注意点:浮動小数点数を0.0で割ると、Infinity（無限大）または NaN（非数）という特殊な値になります。例外は発生しません。

3. 割り算の余り（剰余）
特徴:割り算の余りを求めるには、剰余演算子（%）を使用します。
        5 % 2 の結果は 1 になります。
注意点:%演算子も、割る数が0の場合、ArithmeticExceptionが発生します。

4. 型変換
特徴:整数と浮動小数点数の混合演算では、整数が自動的に浮動小数点数に変換されます。
        5.0 / 2 の結果は 2.5 になります。
注意点:意図しない型変換による精度の低下に注意が必要です。

型の変換
byte<short<int<long<float<double
以下の１、３はjavaが自動で変換してくれる
１　代入時の自動変換
　　意味的に小さな型の値を大きな型の箱に代入する場合、代入される値が代入先の変数の型に自動的に変換されてから代入が行われる。
   大きな型の値を小さな型に代入することは原則できない
２　強制的な型の変換
   大きな型の値を小さな型に代入することは原則できないが、強制的に行うこともできる（キャスト演算子）
   キャスト演算子は元のデータを一部失ってもデータを強制的に変換する。そのため情報の欠損が発生する。
   そのため、よほどの理由がない限りは使うことはない
３　演算時の自動型変換
　　基本的には同じ型同士で計算することになるが、違う型の場合は意味的により大きい型に合わせて計算される。

Javaで数字の後に付くFやDなどの記号は、リテラルの型を指定するために使用されます。それぞれの記号の意味は以下の通りです。

        1. F (または f)

float型のリテラルであることを示します。
float型は、単精度浮動小数点数を表します。
例: 3.14F, 1.23f
        2. D (または d)

double型のリテラルであることを示します。
double型は、倍精度浮動小数点数を表します。
double型は、浮動小数点数のデフォルトの型であるため、Dを省略してもdouble型として扱われます。
例: 3.14D, 1.23d, 3.14
        3. L (または l)

long型のリテラルであることを示します。
long型は、大きな整数を表します。
例: 1234567890L, 9876543210l
これらの記号を使用する理由

Javaでは、コンパイラがリテラルの型を自動的に推測しますが、特定の型を明示的に指定したい場合にこれらの記号を使用します。
特に、float型のリテラルを使用する場合、Fを付けないとコンパイラはdouble型として解釈し、型のエラーが発生する可能性があります。
long型も同様に、int型の範囲を超えた数値を使う場合は、末尾にLをつけないと、コンパイルエラーとなります。
